/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040300
#define SWIGJAVA

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


/* ---- C/C++-Code, der 1:1 in die generierte Wrapper-Quelldatei geht ---- */
#include "AdsDef.h"
#include "AdsLib.h"


#include <stdint.h>		// Use the C99 official header


#include <string>


typedef uint8_t ByteArray6;

SWIGINTERN ByteArray6 *new_ByteArray6(size_t nelements){
  return new uint8_t[nelements]();
}
SWIGINTERN void delete_ByteArray6(ByteArray6 *self){
  delete [] self;
}
SWIGINTERN uint8_t ByteArray6_getitem(ByteArray6 *self,size_t index){
  return self[index];
}
SWIGINTERN void ByteArray6_setitem(ByteArray6 *self,size_t index,uint8_t value){
  self[index] = value;
}
SWIGINTERN uint8_t *ByteArray6_cast(ByteArray6 *self){
  return self;
}
SWIGINTERN ByteArray6 *ByteArray6_frompointer(uint8_t *t){
  return (ByteArray6 *) t;
}

static AmsNetId *AmsNetId_fromIPv4(const std::string &ip)
{
    return new AmsNetId(ip);
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_AdsLibJNI_new_1ByteArray6(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  ByteArray6 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (ByteArray6 *)new_ByteArray6(SWIG_STD_MOVE(arg1));
  *(ByteArray6 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_AdsLibJNI_delete_1ByteArray6(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ByteArray6 *arg1 = (ByteArray6 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ByteArray6 **)&jarg1; 
  delete_ByteArray6(arg1);
}


SWIGEXPORT jshort JNICALL Java_AdsLibJNI_ByteArray6_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jshort jresult = 0 ;
  ByteArray6 *arg1 = (ByteArray6 *) 0 ;
  size_t arg2 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ByteArray6 **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (uint8_t)ByteArray6_getitem(arg1,SWIG_STD_MOVE(arg2));
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_AdsLibJNI_ByteArray6_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jshort jarg3) {
  ByteArray6 *arg1 = (ByteArray6 *) 0 ;
  size_t arg2 ;
  uint8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ByteArray6 **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  ByteArray6_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT jlong JNICALL Java_AdsLibJNI_ByteArray6_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ByteArray6 *arg1 = (ByteArray6 *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ByteArray6 **)&jarg1; 
  result = (uint8_t *)ByteArray6_cast(arg1);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_AdsLibJNI_ByteArray6_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  ByteArray6 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  result = (ByteArray6 *)ByteArray6_frompointer(arg1);
  *(ByteArray6 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_AdsLibJNI_make_1AmsNetId(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  AmsNetId result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = make_AmsNetId((std::string const &)*arg1);
  *(AmsNetId **)&jresult = new AmsNetId(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_AdsLibJNI_SYSTEMSERVICE_1OPENGENERIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  bhf::ads::nSystemServiceOpenFile result;
  
  (void)jenv;
  (void)jcls;
  result = (bhf::ads::nSystemServiceOpenFile)bhf::ads::SYSTEMSERVICE_OPENGENERIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_AdsLibJNI_AdsSyncReadReqEx2(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  long arg1 ;
  AmsAddr *arg2 = (AmsAddr *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  void *arg6 = (void *) 0 ;
  uint32_t *arg7 = (uint32_t *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = *(AmsAddr **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  arg7 = *(uint32_t **)&jarg7; 
  result = (long)AdsSyncReadReqEx2(arg1,(AmsAddr const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_AdsLibJNI_AdsSyncReadDeviceInfoReqEx(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  long arg1 ;
  AmsAddr *arg2 = (AmsAddr *) 0 ;
  char *arg3 = (char *) 0 ;
  AdsVersion *arg4 = (AdsVersion *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = *(AmsAddr **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(AdsVersion **)&jarg4; 
  result = (long)AdsSyncReadDeviceInfoReqEx(arg1,(AmsAddr const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_AdsLibJNI_AdsSyncReadStateReqEx(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  long arg1 ;
  AmsAddr *arg2 = (AmsAddr *) 0 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  uint16_t *arg4 = (uint16_t *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = *(AmsAddr **)&jarg2; 
  arg3 = *(uint16_t **)&jarg3; 
  arg4 = *(uint16_t **)&jarg4; 
  result = (long)AdsSyncReadStateReqEx(arg1,(AmsAddr const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_AdsLibJNI_AdsSyncReadWriteReqEx2(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  long arg1 ;
  AmsAddr *arg2 = (AmsAddr *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  void *arg6 = (void *) 0 ;
  uint32_t arg7 ;
  void *arg8 = (void *) 0 ;
  uint32_t *arg9 = (uint32_t *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = *(AmsAddr **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  arg7 = (uint32_t)jarg7; 
  arg8 = *(void **)&jarg8; 
  arg9 = *(uint32_t **)&jarg9; 
  result = (long)AdsSyncReadWriteReqEx2(arg1,(AmsAddr const *)arg2,arg3,arg4,arg5,arg6,arg7,(void const *)arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_AdsLibJNI_AdsSyncWriteReqEx(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  long arg1 ;
  AmsAddr *arg2 = (AmsAddr *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  void *arg6 = (void *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = *(AmsAddr **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (long)AdsSyncWriteReqEx(arg1,(AmsAddr const *)arg2,arg3,arg4,arg5,(void const *)arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_AdsLibJNI_AdsSyncWriteControlReqEx(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  long arg1 ;
  AmsAddr *arg2 = (AmsAddr *) 0 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  uint32_t arg5 ;
  void *arg6 = (void *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = *(AmsAddr **)&jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint16_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (long)AdsSyncWriteControlReqEx(arg1,(AmsAddr const *)arg2,arg3,arg4,arg5,(void const *)arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_AdsLibJNI_AdsSyncAddDeviceNotificationReqEx(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  long arg1 ;
  AmsAddr *arg2 = (AmsAddr *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  AdsNotificationAttrib *arg5 = (AdsNotificationAttrib *) 0 ;
  PAdsNotificationFuncEx arg6 ;
  uint32_t arg7 ;
  uint32_t *arg8 = (uint32_t *) 0 ;
  PAdsNotificationFuncEx *argp6 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = *(AmsAddr **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = *(AdsNotificationAttrib **)&jarg5; 
  argp6 = *(PAdsNotificationFuncEx **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PAdsNotificationFuncEx");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (uint32_t)jarg7; 
  arg8 = *(uint32_t **)&jarg8; 
  result = (long)AdsSyncAddDeviceNotificationReqEx(arg1,(AmsAddr const *)arg2,arg3,arg4,(AdsNotificationAttrib const *)arg5,SWIG_STD_MOVE(arg6),arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_AdsLibJNI_AdsSyncDelDeviceNotificationReqEx(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  long arg1 ;
  AmsAddr *arg2 = (AmsAddr *) 0 ;
  uint32_t arg3 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = *(AmsAddr **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (long)AdsSyncDelDeviceNotificationReqEx(arg1,(AmsAddr const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_AdsLibJNI_AdsSyncGetTimeoutEx(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jint jresult = 0 ;
  long arg1 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = *(uint32_t **)&jarg2; 
  result = (long)AdsSyncGetTimeoutEx(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_AdsLibJNI_AddLocalRoute(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  AmsNetId arg1 ;
  char *arg2 = (char *) 0 ;
  AmsNetId *argp1 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(AmsNetId **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AmsNetId");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (long)bhf::ads::AddLocalRoute(SWIG_STD_MOVE(arg1),(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_AdsLibJNI_DelLocalRoute(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AmsNetId arg1 ;
  AmsNetId *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(AmsNetId **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AmsNetId");
    return ;
  }
  arg1 = *argp1; 
  bhf::ads::DelLocalRoute(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void JNICALL Java_AdsLibJNI_SetLocalAddress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AmsNetId arg1 ;
  AmsNetId *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(AmsNetId **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AmsNetId");
    return ;
  }
  arg1 = *argp1; 
  bhf::ads::SetLocalAddress(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT jint JNICALL Java_AdsLibJNI_AddRemoteRoute(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  AmsNetId arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  AmsNetId *argp2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  argp2 = *(AmsNetId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AmsNetId");
    return 0;
  }
  arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (long)bhf::ads::AddRemoteRoute((std::string const &)*arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_AdsLibJNI_GetRemoteAddress(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  AmsNetId *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(AmsNetId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AmsNetId & is null");
    return 0;
  } 
  result = (long)bhf::ads::GetRemoteAddress((std::string const &)*arg1,*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_AdsLibJNI_AmsNetId_1fromIPv4(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  AmsNetId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (AmsNetId *)AmsNetId_fromIPv4((std::string const &)*arg1);
  *(AmsNetId **)&jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

