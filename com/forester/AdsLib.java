// Targeted by JavaCPP version 1.5.8: DO NOT EDIT THIS FILE

package com.forester;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class AdsLib extends com.forester.AdsLibConfig {
    static { Loader.load(); }

// Parsed from AdsLib.h

// SPDX-License-Identifier: MIT
/**
   Copyright (c) 2020 - 2022 Beckhoff Automation GmbH & Co. KG
 */

// #pragma once

// #if defined(USE_TWINCAT_ROUTER)
// #include "TwinCAT/AdsLib.h"
// #else
// #include "standalone/AdsLib.h"
// #endif

// #include "Sockets.h"

/**
 * Reads data synchronously from an ADS server.
 * @param port [in] port number of an Ads port that had previously been opened with AdsPortOpenEx().
 * @param pAddr [in] Structure with NetId and port number of the ADS server.
 * @param indexGroup [in] Index Group.
 * @param indexOffset [in] Index Offset.
 * @param bufferLength [in] Length of the data in bytes.
 * @param buffer [out] Pointer to a data buffer that will receive the data.
 * @param bytesRead [out] pointer to a variable. If successful, this variable will return the number of actually read data bytes.
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
public static native long AdsSyncReadReqEx2(long port, @Const AmsAddr pAddr, @Cast("uint32_t") int indexGroup,
		       @Cast("uint32_t") int indexOffset, @Cast("uint32_t") int bufferLength,
		       Pointer buffer, @Cast("uint32_t*") IntPointer bytesRead);
public static native long AdsSyncReadReqEx2(long port, @Const AmsAddr pAddr, @Cast("uint32_t") int indexGroup,
		       @Cast("uint32_t") int indexOffset, @Cast("uint32_t") int bufferLength,
		       Pointer buffer, @Cast("uint32_t*") IntBuffer bytesRead);
public static native long AdsSyncReadReqEx2(long port, @Const AmsAddr pAddr, @Cast("uint32_t") int indexGroup,
		       @Cast("uint32_t") int indexOffset, @Cast("uint32_t") int bufferLength,
		       Pointer buffer, @Cast("uint32_t*") int[] bytesRead);

/**
 * Reads the identification and version number of an ADS server.
 * @param port [in] port number of an Ads port that had previously been opened with AdsPortOpenEx().
 * @param pAddr [in] Structure with NetId and port number of the ADS server.
 * @param devName [out] Pointer to a character string of at least 16 bytes, that will receive the name of the ADS device.
 * @param version [out] Address of a variable of type AdsVersion, which will receive the version number, revision number and the build number.
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
public static native long AdsSyncReadDeviceInfoReqEx(long port, @Const AmsAddr pAddr, @Cast("char*") BytePointer devName,
				AdsVersion version);
public static native long AdsSyncReadDeviceInfoReqEx(long port, @Const AmsAddr pAddr, @Cast("char*") ByteBuffer devName,
				AdsVersion version);
public static native long AdsSyncReadDeviceInfoReqEx(long port, @Const AmsAddr pAddr, @Cast("char*") byte[] devName,
				AdsVersion version);

/**
 * Reads the ADS status and the device status from an ADS server.
 * @param port [in] port number of an Ads port that had previously been opened with AdsPortOpenEx().
 * @param pAddr [in] Structure with NetId and port number of the ADS server.
 * @param adsState [out] Address of a variable that will receive the ADS status (see data type [ADSSTATE](https://infosys.beckhoff.com/content/1031/tcadsdll2/html/tcadsdll_enumadsstate.htm?id=2714257434501002224).
 * @param devState [out] Address of a variable that will receive the device status.
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
public static native long AdsSyncReadStateReqEx(long port, @Const AmsAddr pAddr, @Cast("uint16_t*") ShortPointer adsState,
			   @Cast("uint16_t*") ShortPointer devState);
public static native long AdsSyncReadStateReqEx(long port, @Const AmsAddr pAddr, @Cast("uint16_t*") ShortBuffer adsState,
			   @Cast("uint16_t*") ShortBuffer devState);
public static native long AdsSyncReadStateReqEx(long port, @Const AmsAddr pAddr, @Cast("uint16_t*") short[] adsState,
			   @Cast("uint16_t*") short[] devState);

/**
 * Writes data synchronously into an ADS server and receives data back from the ADS server.
 * @param port [in]  port number of an Ads port that had previously been opened with AdsPortOpenEx().
 * @param pAddr [in] Structure with NetId and port number of the ADS server.
 * @param indexGroup [in] Index Group.
 * @param indexOffset [in] Index Offset.
 * @param readLength [in] Length, in bytes, of the read buffer readData.
 * @param readData [out] Buffer for data read from the ADS server.
 * @param writeLength [in] Length of the data, in bytes, send to the ADS server.
 * @param writeData [in] Buffer with data send to the ADS server.
 * @param bytesRead [out] pointer to a variable. If successful, this variable will return the number of actually read data bytes.
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
public static native long AdsSyncReadWriteReqEx2(long port, @Const AmsAddr pAddr,
			    @Cast("uint32_t") int indexGroup, @Cast("uint32_t") int indexOffset,
			    @Cast("uint32_t") int readLength, Pointer readData,
			    @Cast("uint32_t") int writeLength, @Const Pointer writeData,
			    @Cast("uint32_t*") IntPointer bytesRead);
public static native long AdsSyncReadWriteReqEx2(long port, @Const AmsAddr pAddr,
			    @Cast("uint32_t") int indexGroup, @Cast("uint32_t") int indexOffset,
			    @Cast("uint32_t") int readLength, Pointer readData,
			    @Cast("uint32_t") int writeLength, @Const Pointer writeData,
			    @Cast("uint32_t*") IntBuffer bytesRead);
public static native long AdsSyncReadWriteReqEx2(long port, @Const AmsAddr pAddr,
			    @Cast("uint32_t") int indexGroup, @Cast("uint32_t") int indexOffset,
			    @Cast("uint32_t") int readLength, Pointer readData,
			    @Cast("uint32_t") int writeLength, @Const Pointer writeData,
			    @Cast("uint32_t*") int[] bytesRead);

/**
 * Writes data synchronously to an ADS server.
 * @param port [in] port number of an Ads port that had previously been opened with AdsPortOpenEx().
 * @param pAddr [in] Structure with NetId and port number of the ADS server.
 * @param indexGroup [in] Index Group.
 * @param indexOffset [in] Index Offset.
 * @param bufferLength [in] Length of the data, in bytes, send to the ADS server.
 * @param buffer [in] Buffer with data send to the ADS server.
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
public static native long AdsSyncWriteReqEx(long port, @Const AmsAddr pAddr, @Cast("uint32_t") int indexGroup,
		       @Cast("uint32_t") int indexOffset, @Cast("uint32_t") int bufferLength,
		       @Const Pointer buffer);

/**
 * Changes the ADS status and the device status of an ADS server.
 * @param port [in] port number of an Ads port that had previously been opened with AdsPortOpenEx().
 * @param pAddr [in] Structure with NetId and port number of the ADS server.
 * @param adsState [in] New ADS status.
 * @param devState [in] New device status.
 * @param bufferLength [in] Length of the additional data, in bytes, send to the ADS server.
 * @param buffer [in] Buffer with additional data send to the ADS server.
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
public static native long AdsSyncWriteControlReqEx(long port, @Const AmsAddr pAddr,
			      @Cast("uint16_t") short adsState, @Cast("uint16_t") short devState,
			      @Cast("uint32_t") int bufferLength, @Const Pointer buffer);

/**
 * A notification is defined within an ADS server (e.g. PLC). When a
 * certain event occurs a function (the callback function) is invoked in
 * the ADS client (C program).
 * @param port [in] port number of an Ads port that had previously been opened with AdsPortOpenEx().
 * @param pAddr [in] Structure with NetId and port number of the ADS server.
 * @param indexGroup [in] Index Group.
 * @param indexOffset [in] Index Offset.
 * @param pAttrib [in] Pointer to the structure that contains further information.
 * @param pFunc [in] Pointer to the structure describing the callback function.
 * @param hUser [in] 32-bit value that is passed to the callback function.
 * @param pNotification [out] Address of the variable that will receive the handle of the notification.
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
public static native long AdsSyncAddDeviceNotificationReqEx(long port, @Const AmsAddr pAddr,
				       @Cast("uint32_t") int indexGroup,
				       @Cast("uint32_t") int indexOffset,
				       @Const AdsNotificationAttrib pAttrib,
				       @ByVal PAdsNotificationFuncEx pFunc,
				       @Cast("uint32_t") int hUser, @Cast("uint32_t*") IntPointer pNotification);
public static native long AdsSyncAddDeviceNotificationReqEx(long port, @Const AmsAddr pAddr,
				       @Cast("uint32_t") int indexGroup,
				       @Cast("uint32_t") int indexOffset,
				       @Const AdsNotificationAttrib pAttrib,
				       @ByVal PAdsNotificationFuncEx pFunc,
				       @Cast("uint32_t") int hUser, @Cast("uint32_t*") IntBuffer pNotification);
public static native long AdsSyncAddDeviceNotificationReqEx(long port, @Const AmsAddr pAddr,
				       @Cast("uint32_t") int indexGroup,
				       @Cast("uint32_t") int indexOffset,
				       @Const AdsNotificationAttrib pAttrib,
				       @ByVal PAdsNotificationFuncEx pFunc,
				       @Cast("uint32_t") int hUser, @Cast("uint32_t*") int[] pNotification);

/**
 * A notification defined previously is deleted from an ADS server.
 * @param port [in] port number of an Ads port that had previously been opened with AdsPortOpenEx().
 * @param pAddr [in] Structure with NetId and port number of the ADS server.
 * @param hNotification [in] Address of the variable that contains the handle of the notification.
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
public static native long AdsSyncDelDeviceNotificationReqEx(long port, @Const AmsAddr pAddr,
				       @Cast("uint32_t") int hNotification);

/**
 * Read the configured timeout for the ADS functions. The standard value is 5000 ms.
 * @param port [in] port number of an Ads port that had previously been opened with AdsPortOpenEx().
 * @param timeout [out] Buffer to store timeout value in ms.
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
public static native long AdsSyncGetTimeoutEx(long port, @Cast("uint32_t*") IntPointer timeout);
public static native long AdsSyncGetTimeoutEx(long port, @Cast("uint32_t*") IntBuffer timeout);
public static native long AdsSyncGetTimeoutEx(long port, @Cast("uint32_t*") int[] timeout);
/**
 * Add new ams route to target system
 * @param ams [in] address of the target system
 * @param ip [in] address of the target system
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
@Namespace("bhf::ads") public static native long AddLocalRoute(@ByVal AmsNetId ams, @Cast("const char*") BytePointer ip);
@Namespace("bhf::ads") public static native long AddLocalRoute(@ByVal AmsNetId ams, String ip);

/**
 * Delete ams route that had previously been added with AddLocalRoute().
 * @param ams [in] address of the target system
 */
@Namespace("bhf::ads") public static native void DelLocalRoute(@ByVal AmsNetId ams);

/**
 * Change local NetId
 * @param ams [in] local AmsNetId
 */
@Namespace("bhf::ads") public static native void SetLocalAddress(@ByVal AmsNetId ams);

/**
 * Add an ADS route to a remote TwinCAT system
 * @param remote [in] hostname or ip address of the remote TwinCAT system
 * @param destNetId [in] AmsNetId of the routes destination
 * @param destAddr [in] hostname or ip address of the routes destination
 * @param routeName [in] name of the new route
 * @param remoteUsername [in] username on the remote TwinCAT system
 * @param remotePassword [in] password for the user on the remote TwinCAT system
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
@Namespace("bhf::ads") public static native long AddRemoteRoute(@StdString BytePointer remote, @ByVal AmsNetId destNetId,
		    @StdString BytePointer destAddr, @StdString BytePointer routeName,
		    @StdString BytePointer remoteUsername,
		    @StdString BytePointer remotePassword);
@Namespace("bhf::ads") public static native long AddRemoteRoute(@StdString String remote, @ByVal AmsNetId destNetId,
		    @StdString String destAddr, @StdString String routeName,
		    @StdString String remoteUsername,
		    @StdString String remotePassword);

/**
 * Read AmsNetId of some TwinCAT remote host
 * @param remote [in] hostname or ip address of the remote TwinCAT system
 * @param netId [out] on success the AmsNetId of the remote TwinCAT system is written here
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
@Namespace("bhf::ads") public static native long GetRemoteAddress(@StdString BytePointer remote, @ByRef AmsNetId netId);
@Namespace("bhf::ads") public static native long GetRemoteAddress(@StdString String remote, @ByRef AmsNetId netId);



public static final int AdsAddRoute =AddLocalRoute;
public static final int AdsDelRoute =DelLocalRoute;
public static final int AdsSetLocalAddress =SetLocalAddress;


// Parsed from AdsDef.h

// SPDX-License-Identifier: MIT
/**
   Copyright (c) 2015 - 2022 Beckhoff Automation GmbH & Co. KG
 */

// #pragma once

// #if defined(USE_TWINCAT_ROUTER)
// #include "TwinCAT/AdsDef.h"
// #else
// #include "standalone/AdsDef.h"
// #endif

// #include <iosfwd>
public static native @Cast("bool") @Name("operator <") boolean lessThan(@Const @ByRef AmsNetId lhs, @Const @ByRef AmsNetId rhs);
public static native @Cast("bool") @Name("operator <") boolean lessThan(@Const @ByRef AmsAddr lhs, @Const @ByRef AmsAddr rhs);
public static native @Cast("std::ostream*") @ByRef @Name("operator <<") Pointer shiftLeft(@Cast("std::ostream*") @ByRef Pointer os, @Const @ByRef AmsNetId netId);
public static native @ByVal AmsNetId make_AmsNetId(@StdString BytePointer addr);
public static native @ByVal AmsNetId make_AmsNetId(@StdString String addr);
/** enum bhf::ads::nSystemServiceOpenFile */
public static final int
	SYSTEMSERVICE_OPENGENERIC = 1;




// Parsed from standalone/AdsLib.h

// SPDX-License-Identifier: MIT
/** \file
   Copyright (c) 2015 - 2022 Beckhoff Automation GmbH & Co. KG
 */
// #pragma once

// #include "AdsDef.h"

/**
 * The connection (communication port) to the message router is
 * closed. The port to be closed must previously have been opened via
 * an AdsPortOpenEx() call.
 * @param port [in] port number of an Ads port that had previously been opened with AdsPortOpenEx().
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
public static native long AdsPortCloseEx(long port);

/**
 * Establishes a connection (communication port) to the message
 * router. The port number returned by AdsPortOpenEx() is required as
 * parameter for further AdsLib function calls.
 * @return port number of a new Ads port or 0 if no more ports available
 */
public static native long AdsPortOpenEx();

/**
 * Returns the local NetId and port number.
 * @param port [in] port number of an Ads port that had previously been opened with AdsPortOpenEx().
 * @param pAddr [out] Pointer to the structure of type AmsAddr.
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
public static native long AdsGetLocalAddressEx(long port, AmsAddr pAddr);

/**
 * Alters the timeout for the ADS functions. The standard value is 5000 ms.
 * @param port [in] port number of an Ads port that had previously been opened with AdsPortOpenEx().
 * @param timeout [in] Timeout in ms.
 * @return [ADS Return Code](https://infosys.beckhoff.com/content/1031/tcadscommon/html/ads_returncodes.htm?id=1666172286265530469)
 */
public static native long AdsSyncSetTimeoutEx(long port, @Cast("uint32_t") int timeout);


}
